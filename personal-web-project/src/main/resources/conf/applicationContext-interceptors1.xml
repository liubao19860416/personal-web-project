<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
          http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
          http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context-3.0.xsd
          http://www.springframework.org/schema/mvc    
          http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
          http://www.springframework.org/schema/util 
          http://www.springframework.org/schema/util/spring-util-3.0.xsd">

	<mvc:annotation-driven />
	
	<!-- 方式1 -->
	<mvc:default-servlet-handler/>
	<bean id="defaultServletHttpRequestHandler" class="org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler"/>

	<!-- 方式2 -->
	<mvc:resources mapping="/img/**" location="/img/" />
	<mvc:resources mapping="/css/**" location="/css/" />
	<mvc:resources mapping="/js/**" location="/js/**" />

	<context:component-scan base-package="base.controller" />
	<context:component-scan base-package="base.dwr" /> 
	<context:component-scan base-package="base.**" />
	<context:component-scan base-package="base.**.interceptor" />
	
	<!-- 设置默认首页，也可以单独设置多个其他的映射 -->
	<mvc:view-controller path="/index/ok.htm" view-name="redirect:/index.jsp" />
	<!-- 只要请求符合web.xml的请求转发器配置，这里就写那个带后缀名的访问路径即可，name为Controller中的没有后缀的映射路径即可,默认为forward请求转发 -->
	<mvc:view-controller path="/index/ok2.htm" view-name="/base/login" />

	<!-- 需要初始化属性参数的bean的定义 -->
	<bean id="commonInterceptor" class="base.interceptor.CommonInterceptor">
		<!-- <property name="urlRegex" value="^http://[a-zA-Z_0-9/:\\-]*/simpleUrl/\\d{1}\\.htm$" /> -->
		<property name="urlRegex" value="^.+/simpleUrl/[0-9].htm$" />
	</bean>
	<bean id="workTimeInterceptor" class="base.interceptor.WorkTimeInterceptor">
		<property name="openingTime" value="9" />
		<property name="closingTime"  value="18" />
		<property name="outsideOfficeHoursPage">
			<!-- <value>http://localhost:8080/personal-web-project/outsideOfficeHours.jsp</value> -->
			<value>/#{T(com.saike.grape.base.BaseEnvironment).PROJECT_NAME}/outsideOfficeHours.jsp</value>
		</property>
	</bean>
	<!-- 对指定的URL进行放行，在拦截器里注入一个属性 List<String> unCheckURLs -->
	<bean id="loginUnCheckURLsInterceptor2" class="base.interceptor.LoginUnCheckURLsInterceptor2">
		<property name="unCheckURLs">
			<list>
				<!-- 如果请求中包含以下路径，则不进行拦截 -->
				<value>/simpleUrl</value>
				<value>/index</value>
				<value>/login</value>
				<value>/doLogin</value>
				<value>/doLogOut</value>
			</list>
		</property>
	</bean>
	<!-- 对指定的URL进行放行，在拦截器里注入一个数组 String[] unCheckURLs -->
	<bean id="loginUnCheckURLsInterceptor3" class="base.interceptor.LoginUnCheckURLsInterceptor3">
		<property name="unCheckURLs">
			<list>
				<!-- 如果请求中包含以下路径，则不进行拦截 -->
				<value>/simpleUrl</value>
				<value>/login</value>
				<value>/js</value>
				<value>/css</value>
				<value>/image</value>
				<value>/images</value>
			</list>
		</property>
	</bean>
	
	<!-- 性能监控拦截器，记录运行时间大于临界值recordTimePoint的相应方法的信息到指定log文件中,单位为毫秒-->
	<bean id="timeWatcherInterceptor" class="base.interceptor.TimeWatcherInterceptor">
		<property name="recordTimePoint" value="100"/>
	</bean>
	
	<!-- 不用初始化参数的几个bean的定义 -->
	<bean id="loginUnCheckURLsInterceptor1" class="base.interceptor.LoginUnCheckURLsInterceptor1"/>
	
	<!-- 拦截器栈设置方式1：拦截所有的url请求，属于粗粒度的拦截 -->
	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<property name="order" value="-1"/>
		<property name="interceptors">
			<list>
				<!-- 该种方式对默认所有的url请求进行拦截 -->
				<ref local="commonInterceptor" />
				<ref local="workTimeInterceptor" />
				<ref local="timeWatcherInterceptor" />
				<ref bean="loginUnCheckURLsInterceptor1" />
				<ref bean="loginUnCheckURLsInterceptor2" />
				<ref bean="loginUnCheckURLsInterceptor3" />
			</list>
		</property>
	</bean>
	
	<!-- 拦截器栈设置方式2：拦截指定的url请求，属于细粒度的拦截 -->
	<!--设置拦截的路径，目录的层次级别一定要匹配！！！ -->
	<!-- 两者的顺序不能交叉排列，必须mvc:exclude-mapping在mvc:mapping后面 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**/simpleUrl/**" />
			<mvc:exclude-mapping path="/simpleUrl/**" />
			<ref bean="commonInterceptor"/>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**/simpleUrl/**" />
			<mvc:mapping path="/work/work.htm" />
			<mvc:exclude-mapping path="/**/simpleUrl/**" />
			<ref bean="workTimeInterceptor"/>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**/simpleUrl/**" />
			<mvc:mapping path="/order2/**" />
			<mvc:exclude-mapping path="/**" />
			<ref local="loginUnCheckURLsInterceptor2"/>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**/simpleUrl/**" />
			<mvc:mapping path="/order3/**" />
			<mvc:exclude-mapping path="/*/**" />
			<ref local="loginUnCheckURLsInterceptor3"/>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/simpleUrl/**" />
			<mvc:mapping path="/order1/**" />
			<mvc:mapping path="/**/*.json" />
			<mvc:exclude-mapping path="/**/**" />
			<ref local="loginUnCheckURLsInterceptor1"/>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/simpleUrl/**" />
			<mvc:exclude-mapping path="/**/**" />
			<ref local="timeWatcherInterceptor"/>
		</mvc:interceptor>
		
	</mvc:interceptors>

	<!-- 处理Method方法级别上的@RequestMapping注解 ,主要用来解析JSON数据使用的-->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="order" value="-1" />
		<property name="cacheSeconds" value="0" />
		<!-- 进行json支持的处理 -->
		<property name="messageConverters">
			<util:list id="beanList">
				<ref bean="mappingJacksonHttpMessageConverter" />
			</util:list>
		</property>
	</bean>
	<!-- 为了处理返回的JSON数据的编码，默认是ISO-88859-1的，这里把它设置为UTF-8,解决有乱码的情况 -->
	<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>


	<!-- 视图解析器策略 和 视图解析器 ，对JSTL提供良好的支持-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 默认的viewClass,可以不用配置 -->
		<property name="viewClass" value="org.springframework.web.servlet.view.InternalResourceView" /> 
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
		<property name="contentType" value="text/html;charset=UTF8" />
	</bean>

	
	<!-- TODO 下面的需要进行查看 -->
	
	<!-- ResourceBundleViewResolver通过basename所指定的ResourceBundle解析视图名。 对每个待解析的视图，
	ResourceBundle里的[视图名].class所对应的值就是实现该视图的类。 同样，[视图名].url所对应的值是该视图所对应的URL。 
	可以指定一个parent view，其它的视图都可以从parent view扩展。 用这种方法，可以声明一个默认的视图。 -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<!-- <property name="basename" value="welcome" /> -->
		<property name="basenames">
			<list>
				<!-- <ref local="basename"/>
				<ref bean="welcome"/>
				<value>message01</value> -->
				<value>message03</value>
			</list>
		</property>
	</bean> 
	
	<!-- 自定义异常处理，SimpleMappingExceptionResolver这个类可以是个空类，但是要写，方便在java代码里面使用 -->
	<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
			<!-- 这里使用了redirect:/error.jsp方式，尝试forward:/error.jsp方式； -->
				<prop key="com.ziyou.platform.interceptor.SessionTimeoutException">redirect:/error.jsp</prop>
			</props>
		</property>
	</bean>


</beans>

